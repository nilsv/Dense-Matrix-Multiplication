package gemm;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFloat;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory;

public class GemmEngineParameters extends EngineParameters {
	enum Precision {
		SINGLE, DOUBLE
	}

	private static final String s_tag             = "tag";
	private static final String s_hasStreamStatus = "hasStreamStatus";
	private static final String s_frequency       = "frequency";
	private static final String s_tileSize        = "tileSize";
	private static final String s_precision       = "precision";
	private static final String s_useMax5         = "useMax5";
	private static final String s_kernelCount     = "kernelCount";
	private static final String s_slr             = "slr";

	public GemmEngineParameters(String[] args) {
		super(args);
	}

	@Override
	protected void declarations() {
		declareParam(s_tag, DataType.STRING, "");
		declareParam(s_hasStreamStatus, DataType.BOOL, false);
		declareParam(s_frequency, DataType.INT, 150);
		declareParam(s_tileSize, DataType.INT, 16);
		declareParam(s_precision, Precision.class, Precision.DOUBLE);
		declareParam(s_useMax5, DataType.BOOL, false);
		declareParam(s_kernelCount, DataType.INT, 1);
		declareParam(s_slr, DataType.BOOL, false);
	}

	@Override
	protected void validate() {
		if (getFrequency() <= 0)
			throw new IllegalArgumentException("Frequency should be > 0.");
	}

	public String getTag() {
		return getParam(s_tag);
	}

	public boolean hasStreamStatus() {
		return (getTarget() == Target.DFE_SIM) || (Boolean) getParam(s_hasStreamStatus);
	}

	public int getFrequency() {
		return getParam(s_frequency);
	}

	public int getTileSize() {
		return getParam(s_tileSize);
	}

	private Precision getPrecision() {
		return getParam(s_precision);
	}

	public DFEFloat getFloatingPointType() {
		switch (getPrecision()) {
		case SINGLE: return DFETypeFactory.dfeFloat(8, 24);
		case DOUBLE: return DFETypeFactory.dfeFloat(11, 53);
		default: throw new IllegalArgumentException("Unknown precision type.");
		}
	}

	public boolean getUseMax5() {
		return getParam(s_useMax5);
	}

	public int getKernelCount() {
		return getParam(s_kernelCount);
	}

	public boolean getUseSlr() {
		return getParam(s_slr);
	}

	@Override
	public String getBuildName() {
		return getMaxFileName()
				+ "_" + getTarget() + "_" + getDFEModel().toString() + "_ss" + hasStreamStatus() + "_sf" + getFrequency()
				+ "_ts" + getTileSize() + "_slr" + getUseSlr() + (getTag().isEmpty() ? "" : ("_" + getTag()));
	}
}
